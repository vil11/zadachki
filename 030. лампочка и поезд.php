<?php

// УСЛОВИЕ:
// Несколько вагонов сцеплены между собой по кругу. Количество вагонов неизвестно.
// Внутри поезда ходит машинист. Он может включать или выключать свет в вагонах.
// Начальное состояние лампочки внутри любого из вагонов неизвестно.
// 
// ЗАДАНИЕ:
// Машинист должен подсчитать количество вагонов в поезде.
// ----------------------------------------------------------------------------
// 
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ:
// а) Симуляция разового передвижения по поезду из вагона в вагон методом 
// "лодочки": каждый раз при выборе вагона машинист меняет направление движения,
// а также увеличивает кол-во проеденных вагонов на 1. Таким образом, если вагоны 
// расположены цепью по замкнутой окружности, машинист сначала идет в нулевой 
// вагон (любой вагон на усмотрение машиниста), затем в -1й, затем в +1й, затем
// в -2й, затем в +2 и т.д. При переборе массива можно принять, что массив также
// замкнут, как и поезд, т.е. после последнего элемента снова идет самый первый.
// Функция принимает текущее значение итерации (собственно, счетчик машиниста) и
// номер вагона, из которого начинается движение машиниста, и возвращает номер
// вагона, в который пришел машинист.
function goingOpposite($i, $van) {
    switch ($i % 2) {
        case 0:
            $van = $van + $i;
            if ($van > VANS_IN_TRAIN - 1) {
                $van = $van - VANS_IN_TRAIN;
            }
            break;
        case 1:
            $van = $van - $i;
            if ($van < 0) {
                $van = VANS_IN_TRAIN + $van;
            }
            break;
    }
    return $van;
}

// б) Симуляция смены состояния лампочки машинистом.
// Функция принимает значение состояния лампочки (0 или 1), меняет его на 
// противоположное (1 или 0 соответственно), возвращает значение нового состояния.
function turn($lamp) {
    if ($lamp == 0) {
        $lamp = 1;
    } else {
        $lamp = 0;
    }
    return $lamp;
}

// РЕШЕНИЕ:
// 1. Задаем произвольное кол-во вагонов.
define('VANS_IN_TRAIN', mt_rand(10, 10));

// 2. Создаем поезд с заданным кол-вом вагонов и случайным состоянием лампочки 
// внутри каждого из вагонов.
for ($van = 0; $van < VANS_IN_TRAIN; $van++) {
    $train[] = mt_rand(0, 1);
}

// 3. Алгоритм движения машиниста по вагонам. Машинист, двигаясь по поезду 
// "лодочкой", считает кол-во своих ходов и поочередно сравнивает по два 
// значения состояний соседних лампочек. Если значения совпадут (возникает вероятность, 
// что это один и тот же вагон), машинист меняет значение состояния лампочки в 
// текущем (последнем) вагоне на противоположное, и возвращается в предыдущий 
// вагон, чтобы проверить, изменилось ли состояние там. Если не изменилось: 
// машинист возвращается обратно в последний вагон и продолжает движение по 
// поезду. Если изменилось: текущий вагон - тот самый искомый, смыкающий начало
// и конец поезда-окружности. Машинист останавливает счетчик. Выход из цыкла.
for ($i = 1, $van = 0; true; $i++) {
    $van1 = $van;
    $van2 = goingOpposite($i, $van1);
    if ($train[$van1] == $train[$van2]) {
        $train[$van2] = turn($train[$van2]);
        if ($train[$van1] == $train[$van2]) {
            break;
        }
    }
    $van = $van2;
}

// 4. Вывод конечного результата подсчетов машиниста.
echo "There are <b>$i</b> vans in the train.<br><br>";

// 5. Выведем для сравнения также и заданное кол-во вагонов.
echo "Correct answer: <b>" . VANS_IN_TRAIN . "</b>";